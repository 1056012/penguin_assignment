#Cleaning environment 
```{r}
rm(list = ls(all.names = TRUE))
```

#set your working directory 
```{r}
setwd(file.choose())
```

#Load the needed libraries
```{r}
library(palmerpenguins)
library(ggplot2)
suppressPackageStartupMessages(library(janitor)) #this is only for convenience
suppressPackageStartupMessages(library(dplyr)) 
library(tidyr)
library(ragg)
library(svglite)

#You can also create read the libraries in as a function from another file. 
#To do this, you need to create a function folder in your directory, and add an r file called librariesII.r containing the code  as a function. 
# This is what would be inside librariesII.r:
#This file is also included within the functions folder in the repository
# -----------------------------------------------------------
# library(palmerpenguins)
# library(ggplot2)
# suppressPackageStartupMessages(library(janitor))
# suppressPackageStartupMessages(library(dplyr)) 
# -----------------------------------------------------------
#Then to use the function, you can just use:
#source("penguin_assignment(name of wd)/functions/cleaning.r")
```

#Appropriately clean the data
```{r}
source("functions/cleaningII.R")
##Similar to libraries.r, you can either make a similar r file (called cleaning.r) in your functions folder within working directory and add the function for cleaning.
#cleaningII.r, which is the pipe to clean up the column names includes the code:
#This file is also included within the functions folder in the repository
```

```{r}
cleaning <- function(raw_data){
  raw_data %>%
    clean_names() %>%
    remove_empty(c("rows", "cols")) %>%
    select(-starts_with("delta")) %>%
    select(-comments)
}
```


#Saving the data to a new data frame
```{r}
penguins_clean2 <- cleaning(penguins_raw)
```

#Look at the data
```{r}
head(penguins_clean2)
```

#Cleaning data to include body mass, culmen length and species without any NAs
```{r}
remove_empty_body_mass <- function(data_clean){
  data_clean %>%
    filter(!is.na(body_mass_g)) %>%
    select(culmen_length_mm, body_mass_g, species)
}
```

#Save the new changes into a new data frame 
```{r}
penguins_mass_length <- remove_empty_body_mass(penguins_clean2)
```

#New: Run a statistical test
#Linear regression- a simple linear regression is used to estimate the relationship between two quantitative variables. It also allows you to estimate how a dependent variable chnages as the independent variable chnages.
```{r}
mass_length_lm <- lm(body_mass_g ~ culmen_length_mm, data= penguins_mass_length)
```

#viewing the results of the model 
```{r}
summary(mass_length_lm)
```
##The p value for the culmen length has a significantly low p value compared to the intercept.
##The equation of the line is y= 87.415(culmen_length_mm) + 362.307 

#Testing assumptions for simple linear model 
```{r}
plot(mass_length_lm)
```
#Running an ANOVA 
```{r}
anova(mass_length_lm)
```
#Spearman's correlation coefficient in R
```{r}
corr <- cor.test(x=penguins_mass_length$culmen_length_mm, y=penguins_mass_length$body_mass_g, method = 'spearman')

corr
```

#Create a figure
#Figure with one line of best fit
```{r}
scatter_plot<- ggplot(data=penguins_mass_length,
       aes(x=culmen_length_mm,
           y=body_mass_g,
           colour= species
           )) +
  geom_point()+
  scale_colour_discrete(labels=c('Adelie Penguin', 'Chinstrap Penguin', 'Gentoo Penguin'))+
  labs(title = "Culmen Length vs. Body Mass",
       x= "Culmen Length (mm)", 
       y= "Body Mass (g)",
colour = "Species")+
  theme_bw()+
  geom_smooth(aes(x=culmen_length_mm, y=body_mass_g), method="lm", se=FALSE, inherit.aes = FALSE)
  
 
  
scatter_plot
```
#Figure with three lines of best fit for the three species 
```{r}
scatter_plot_version2<- ggplot(data=penguins_mass_length,
       aes(x=culmen_length_mm,
           y=body_mass_g,
           colour= species
           )) +
  geom_point()+
  scale_colour_discrete(labels=c('Adelie Penguin', 'Chinstrap Penguin', 'Gentoo Penguin'))+
  labs(title = "Culmen Length vs. Body Mass",
       x= "Culmen Length (mm)", 
       y= "Body Mass (g)",
colour = "Species")+
  theme_bw()+
  geom_smooth(method=lm, se= FALSE)
  
 
  
scatter_plot_version2
```

#Save the figure 
```{r}
#Make a new folder called "figures" in your working directory. 
#This is where your figures will be saved
```

#make your plot a function
```{r}
scatter_function <- function(penguins_mass_length)
  {
  penguins_mass_length %>%
    ggplot(aes(x=culmen_length_mm, y=body_mass_g, colour= species
           )) +
  geom_point()+
  scale_colour_discrete(labels=c('Adelie Penguin', 'Chinstrap Penguin', 'Gentoo Penguin'))+
  labs(title = "Culmen Length vs. Body Mass",
       x= "Culmen Length (mm)", 
       y= "Body Mass (g)",
colour = "Species")+
  theme_bw()+
  geom_smooth(aes(x=culmen_length_mm, y=body_mass_g), method="lm", se=FALSE, inherit.aes = FALSE)
}

#Similar to the other functions, you can create another pipeline here.
#You can create an r file called plottingII.r and include the code above making the function.
#This can then be used by source("functions/plottingII.r")
#This file is also included within the functions folder in the repository
```

#Creating the figure object
```{r}
figure1 <- scatter_function(penguins_mass_length)
```

#Save figure as a .png
```{r}
##Call the function that will save it as a .png, to save the figure in your figures document in your working directory 

agg_png("figures/scatterplot1.png",
        width=500, height=500, units = "px")
scatter_plot
dev.off()
```

#Or save figure as a vector image
```{r}
svglite("figures/scatterplot2.svg", 
        width = 5.9, height = 5.9)
scatter_plot
dev.off()
# The units for this library are inches -- 15cm is 5.9 inches. 
